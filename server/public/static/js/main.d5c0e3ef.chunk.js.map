{"version":3,"sources":["services/AuthService.js","components/auth/Signup.js","components/auth/Login.js","components/navbar/Navbar.js","App.js","components/ownerPanel.js","serviceWorker.js","index.js"],"names":["AuthService","signup","username","password","service","post","then","response","data","login","loggedin","get","logout","delete","this","axios","create","baseURL","process","REACT_APP_HOST","withCredentials","Signup","props","handleFormSubmit","event","preventDefault","state","setState","getUser","user","catch","error","str","JSON","parse","e","parseJsonIfStringify","message","handleChange","target","name","value","onSubmit","type","onChange","Component","Login","Navbar","className","href","data-activates","isNotAuth","to","isAuth","onClick","id","data-target","App","userObj","loggedInUser","fetchUser","err","rol","componentTrue","componentFalse","console","log","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5c0e3ef.chunk.js","sourcesContent":["// auth/auth-service.js\nimport axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_HOST}`,\n      withCredentials: true\n    });\n  }\n\n  signup = (username, password) => {\n\n    return this.service.post('users/create', {username, password})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('sessions/create', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    \n    return this.service.get('users/currentUser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.delete('sessions/delete',)\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;","// auth/Signup.js\nimport React, { Component } from 'react';\nimport AuthService from './../../services/AuthService'\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service.signup(username, password)\n    .then( response => {\n        this.setState({\n            username: \"\", \n            password: \"\",\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user)\n    })\n    .catch(error => {\n\n      function parseJsonIfStringify(str) {\n        try {\n            JSON.parse(str);\n        } catch (e) {\n            return str;\n        }\n        return JSON.parse(str);\n      }\n\n\n      this.setState({\n        username: username,\n        password: password,\n        error: parseJsonIfStringify(error.response.data.message)\n      });\n    })\n  }\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n      \n\n  render() {\n    return(\n      <div>\n        <h3>Welcome!, create your account next:</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <fieldset>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={ e => this.handleChange(e)}/>\n          </fieldset>\n          \n          <h1>{this.state.error && this.state.error.username ? this.state.error.username : ''}</h1>\n          \n          <fieldset>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)} />\n          </fieldset>\n          <h1>{this.state.error && this.state.error.password ? this.state.error.password : ''}</h1>\n          \n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n      \n        <h1>{(this.state.error && typeof this.state.error === 'string') ? this.state.error : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;","// auth/Signup.js\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from './../../services/AuthService'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          error: false\n        });\n\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (<div>\n      <h3>Please, login to our site</h3>\n\n      <form onSubmit={this.handleFormSubmit}>\n        <fieldset>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <fieldset>\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n\n      <h1>{this.state.error ? 'Error' : ''}</h1>\n    </div>)\n  }\n}\n\nexport default Login;","// navbar/Navbar.js\n\nimport React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nimport \"./Navbar.scss\"\n\nclass Navbar extends Component {\n  \n\n\n  render() {\n\n   return (\n\n\n \n <nav>\n\n   <div className=\"nav-wrapper\">\n\n     <a href=\"#!\" className=\"brand-logo\">Logo</a>\n\n     <a href=\"#\" data-activates=\"mobile-demo\" className=\"button-collapse\"><i className=\"material-icons\">menu</i></a>\n\n     <ul className=\"right hide-on-med-and-down\">\n\n        {this.props.isNotAuth(<li className=\"active\"><Link to=\"/signup\">Signup</Link></li>)}\n        {this.props.isNotAuth(<li><Link to=\"/login\">Login</Link></li>)}\n        {this.props.isAuth(\"all-roles\", <li><a onClick={() => this.props.logout()}>Logout</a></li>)}\n\n     </ul>\n\n     <ul className=\"side-nav\" id=\"mobile-demo\">\n\n        {this.props.isNotAuth(<li className=\"active\"><Link  to=\"/signup\">Signup</Link></li>)}\n        {this.props.isNotAuth(<li><Link to=\"/login\">Login</Link></li>)}\n        {this.props.isAuth(\"all-roles\", <li><a  data-target=\"slide-out\" className=\"sidenav-trigger\" onClick={() => this.props.logout()}>Logout</a></li>)}\n\n     </ul>\n\n   </div>\n\n </nav>\n\n    \n\n   \n\n\n   \n\n \n    );  \n  }\n}\n\nexport default Navbar;\n","import React, { Component, Fragment } from \"react\";\n\nimport { Switch, Route, Redirect, Link } from \"react-router-dom\";\n\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport AuthService from \"./services/AuthService\";\n\nimport OwnerPanel from \"./components/ownerPanel\";\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null\n    };\n    this.service = new AuthService();\n\n    this.fetchUser()\n  }\n\n  getUser = userObj => {\n    this.setState({\n      loggedInUser: userObj,\n    });\n  };\n\n\n  logout = () => {\n    this.service.logout().then(() => {\n      this.setState({ loggedInUser: false });\n    });\n  };\n\n\n\n\n\n  fetchUser() {\n\n\n    return this.service\n      .loggedin()\n      .then(response => {\n       \n        this.setState({\n          loggedInUser: response,\n        });\n      })\n      .catch(err => {\n        \n        this.setState({\n          loggedInUser: false,\n        });\n      });\n  }\n\n  isAuth(rol,componentTrue, componentFalse) {\n    if (this.state.loggedInUser === null) return;\n\n    switch(rol) {\n\n      case \"all-roles\": \n      \n      \n      if (!componentTrue && this.state.loggedInUser) return true;\n      \n\n      if (componentTrue && this.state.loggedInUser) return componentTrue;\n\n      if(componentFalse) return componentFalse;\n\n      return false;\n\n      \n\n      case \"vehiclesOwner\":\n\n\n          if(this.state.loggedInUser && componentTrue) return componentTrue;\n\n          if(this.state.loggedInUser && !componentTrue) return true;\n\n          if(!this.state.loggedInUser && componentFalse) return componentFalse;\n\n          return false\n\n    }\n\n    \n  }\n\n\n// isVehiculeOwner(component) {\n\n//   if (this.state.loggedInUser === null) return;\n  \n//   return (this.state.loggedInUser === false) ? <Redirect to=\"/login\" /> : component ;\n// }\n\nisNotAuth(componentTrue, componentFalse) {\n\n\n  if (!componentTrue && !this.state.loggedInUser) return true;\n\n    if (componentTrue && !this.state.loggedInUser) return componentTrue;\n\n    if(componentFalse) return componentFalse;\n\n    return false;\n  \n}\n\n  render() {\n\n    console.log(this.state);\n    return (\n\n      <Fragment>\n        <div className=\"app\">\n           <Navbar \n                isNotAuth={(componentTrue, componentFalse) => this.isNotAuth(componentTrue, componentFalse)}\n                isAuth={(rol,componentTrue, componentFalse) => this.isAuth(rol,componentTrue, componentFalse)}\n                logout={() => this.logout()} /> \n          \n\n            <Switch>\n              <Route exact path=\"/signup\" render={() => this.isNotAuth(<Signup getUser={this.getUser} />, <Redirect to=\"/\" />)} />\n              <Route exact path=\"/login\" render={() => this.isNotAuth(<Login getUser={this.getUser} />, <Redirect to=\"/\" />)} />\n\n\n              {/* <Route exact path=\"/\" render={() => this.isAuth(false, <OwnerPanel />, <Redirect to=\"/\" />)} /> */}\n              \n             \n              <Route render={() => this.isNotAuth(<Redirect to=\"/login\" />)} />\n              <Route render={() => <Redirect to=\"/\" />} />\n            </Switch>\n            <Link to=\"/\">Proptected</Link> \n          \n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\n\nexport default class OwnerPanel extends Component {\n  render() {\n    return (\n      <div>\n        ruta protegida\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}